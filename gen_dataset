#!/usr/bin/env python

import sys
import os
from argparse import ArgumentParser
import time
import shutil

homedir=os.environ['HOME']
sys.path.append(os.path.join(homedir, "scripts/utils/"))
import script_utils

def parse_args():
    usage = "usage: %prog [options] -d <dir> [-o <dir>] [-j] "
    parser = ArgumentParser()
    parser.add_argument("-m", "--model", action="store",
                        type=str, dest="blender_model", required=True,
                        help="file path to blender model [.blend]")
    parser.add_argument("-e", "-error_mode", action="store",
                        type=str, dest="error_mode", default="none",
                        help="error mode for scene, possible Values: random, none, dyncal")    
    parser.add_argument("-t", "--traj_mode", action="store",
                        type=str, dest="traj_mode", default="none",
                        help="trajectory mode for scene, possible values: none, random, linear, rotation, linear_random_rotation, linear_random_translation")
    parser.add_argument("-n", "--num_samples", action="store",
                        type=int, dest="num_samples", default=10,
                        help="number of samples to generate")

    options = parser.parse_args()
    
    return options

def main():
    
    start = time.time()
    
    options = parse_args()
    blender = os.path.join(homedir, "blender-git/build_linux/bin/blender")
    script = os.path.join(homedir, "scripts/render_scene.py")

    cmd = " ".join([    blender,
                        options.blender_model,
                        "-b", "-P",
                        script, "--", 
                        "-e", options.error_mode , "-t", options.traj_mode , "-n", str(options.num_samples)])

    os.system(cmd)
    dataset_basename = os.path.basename(options.blender_model).split(".")[0]
    output_path = os.path.join(homedir, "blender_output", dataset_basename)
    script_utils.conv_gt(output_path)
    
    # automate naming of dataset and moving to storage
    dataset_name = dataset_basename + options.traj_mode.title() + options.error_mode.title()
    storage_fp = os.path.join("/storage/StereoEval/datasets/Synthetic", dataset_name)
    shutil.move(output_path, storage_fp)
    end = time.time()
    print("Dataset generated; time taken [min]: " + str((end-start)/60.0))

if __name__ == "__main__":
    main()
